# -*- coding: utf-8 -*-
"""Document_Analyser.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18w_exOF44ukh0nImeTXtCMJJE0ZITT5N
"""

import os
from docx import Document
from PyPDF2 import PdfReader, PdfWriter
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import Paragraph, Frame
from reportlab.lib.units import inch
from io import BytesIO
import tempfile
from better_profanity import profanity

def check_profanity(text):
    contains_profanity = profanity.contains_profanity(text)
    return "Profane" if contains_profanity else "Not Profane"

def analyze_document(input_path):
    file_extension = os.path.splitext(input_path)[1].lower()
    input_filename = os.path.basename(input_path)
    output_filename = f"Report for {os.path.splitext(input_filename)[0]}.pdf"
    output_path = os.path.join(os.path.dirname(input_path), output_filename)

    if file_extension == '.txt':
        with open(input_path, 'r', encoding='utf-8') as file:
            content = file.read()
    elif file_extension == '.docx':
        doc = Document(input_path)
        content = ' '.join([paragraph.text for paragraph in doc.paragraphs])
    elif file_extension == '.pdf':
        reader = PdfReader(input_path)
        content = ''
        for page in reader.pages:
            content += page.extract_text()
    else:
        raise ValueError("Unsupported file format")

    words = content.split()
    total_words = len(words)

    profane_words = [word for word in words if check_profanity(word) == "Profane"]
    profane_word_count = len(profane_words)

    create_pdf_output(output_path, content, profane_words, total_words, profane_word_count, input_filename)

def create_pdf_output(output_path, content, profane_words, total_words, profane_word_count, input_filename):
    packet = BytesIO()
    can = canvas.Canvas(packet, pagesize=letter)
    width, height = letter

    # Set up styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle('Title', parent=styles['Title'], alignment=1, spaceAfter=0.3*inch)
    heading_style = ParagraphStyle('Heading', parent=styles['Heading2'], spaceBefore=0.2*inch, spaceAfter=0.1*inch)
    normal_style = ParagraphStyle('Normal', parent=styles['Normal'], spaceBefore=0.1*inch, spaceAfter=0.1*inch)

    # Draw a decorative header
    can.setFillColor(colors.lightblue)
    can.rect(0, height - 1.5*inch, width, 1.5*inch, fill=1)
    can.setFillColor(colors.black)

    # Add title
    title = Paragraph("Document Analysis Report", title_style)
    title.wrapOn(can, width, height)
    title.drawOn(can, 0, height - 1*inch)

    # Add subtitle with input filename
    subtitle_style = ParagraphStyle('Subtitle', parent=styles['Normal'], alignment=1, fontSize=12, textColor=colors.darkblue)
    subtitle = Paragraph(f"Analysis of: {input_filename}", subtitle_style)
    subtitle.wrapOn(can, width, height)
    subtitle.drawOn(can, 0, height - 1.3*inch)

    # Add summary information
    summary_frame = Frame(inch, height - 3*inch, width - 2*inch, 1.5*inch, showBoundary=0)
    summary_content = [
        Paragraph("Summary", heading_style),
        Paragraph(f"Total number of words: {total_words}", normal_style),
        Paragraph(f"Number of words censored: {profane_word_count}", normal_style),
        Paragraph(f"Percentage of censored words: {(profane_word_count / total_words) * 100:.2f}%", normal_style)
    ]
    summary_frame.addFromList(summary_content, can)

    # Add content heading
    content_heading = Paragraph("Document Content", heading_style)
    content_heading.wrapOn(can, width - 2*inch, height)
    content_heading.drawOn(can, inch, height - 3.5*inch)

    # Add content with censored words
    words = content.split()
    x, y = inch, height - 4*inch
    for word in words:
        is_profane = word in profane_words

        if x + can.stringWidth(word + " ") > width - inch:
            y -= 20
            x = inch
            if y < inch:
                can.showPage()
                y = height - inch

        if is_profane:
            can.setFillColor(colors.black)
            can.rect(x, y - 2, can.stringWidth(word), 14, fill=1)
        else:
            can.setFont("Helvetica", 12)
            can.setFillColor(colors.black)
            can.drawString(x, y, word)

        x += can.stringWidth(word + " ")

    # Add footer
    can.setFont("Helvetica", 8)
    can.drawString(inch, 0.5*inch, f"Document Analysis Report - Page 1")
    can.drawRightString(width - inch, 0.5*inch, "Generated by Document Analyzer")

    can.save()

    packet.seek(0)
    new_pdf = PdfReader(packet)
    output = PdfWriter()

    for page in new_pdf.pages:
        output.add_page(page)

    with open(output_path, "wb") as output_stream:
        output.write(output_stream)

# Example usage
input_document_path = r"C:\Projects\AntiCyberBullying\Document_Analyzer\Transcript.txt"  # Change this to your input file
analyze_document(input_document_path)